=> Packages Used in this Project
      fluttertoast: ^8.2.4
      http: ^1.1.2
      another_flushbar: ^1.12.30
      provider: ^6.1.1

=> Created Following directories in lib directory
    lib/data
    lib/res
    lib/repository
    lib/utils
    lib/view
    lib/view_model

=> Created app Exceptions in data directory

=> Created response/status.dart , inside it we created enum
   Created response/api_response.dart ,
        - created an API Class in

=> Added utils/routes/routes & routes_name

=> Added utils/utils.dart
    - implement toastMessage() in utils class
    - implemented flushBarErrorMessage() in utils class
    - implemented snakebar() in utils class

=> Designing Views
    - Added login_view , on TextFromFields added FocusNodes, also implemented Method fieldFocusChange() in utils; for shifting focus.
    - wrapped password TextFormField with ValueListenableBuilder , and implement with valueNotifier
    - Added res/components/round_button.dart and res/colors.dart, and used RoundButton in LogInView

// ----------------------------------------------------------
=> Created repository/auth_repository class
    - Created object of BaseApiServices (which is abstract class), and initializing it with NetworkApiService class
        e.g: BaseApiServices _apiServices = NetworkApiService();
    -

=> Created view_model/auth_view_model class


=> Created res/app_urls class
    - Added the Urls inside it:
        code e.g :
            static var baseUrl = 'https://reqres.in';
            static var loginApiEndPoint = '$baseUrl+/api/login';
            static var registerApiEndPoint = '$baseUrl+/api/register';

=>

// --------------------   Managing User Session   ------------------------------------------------
=> Created UserModel in /lib/model/

=> Created SplashView in /lib/view/

=> Created SplashServices in view_model/services/
    -> In the SplashServices we first getting the userToken, which is being handled by the view_model/user_view_model.dart
    -> In the SplashServices we also created checkAuthentication() , which is first getting the token provided by user_view_model,
        and checking the condition whether the token Exits or not, and then Navigating towards LogInView or HomeView

=>


